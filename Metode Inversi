{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyN7d+06j+PbzmSVxL0FYRpT"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import numpy as np"],"metadata":{"id":"JQrMe33JG61M","executionInfo":{"status":"ok","timestamp":1722684082188,"user_tz":-420,"elapsed":7,"user":{"displayName":"Yusuf Umar Al Hakim","userId":"06665558864843015377"}}},"execution_count":1,"outputs":[]},{"cell_type":"markdown","source":["Metode Inversi Linier \\\n","inversi ini sekali jalan aja bro, sama seperti regresi linier sederhana. tidak perlu di looping\n","\n","$$d = G m$$\n","keterangan: \\\n","$d = $ data observasi \\\n","$G = $ data kalkulasi \\\n","$m = $ parameter model\n","\n","$$m = [G^T G]^{-1} G^T d$$\n","\n","Metode Inversi Non-linier \\\n","Nah ini baru di looping bro, karena ada update parameter model setiap looping\n","\n","$$d =  g(m)$$\n","keterangan: \\\n","$d = $ data observasi (yang dioptimumkan *error*-nya) \\\n","$g(m) = $ data kalkulasi (fungsi *forward modeling*) \\\n","$m = $ parameter model (yang dicari)\n","\n","**Pendekatan Lokal**\n","\n","1.   Metode Gauss-Newton\n","$$m_{n+1} = m_n - [J_n^T J_n]^{-1} J_n^T \\Delta d$$\n","2.   Metode Quasi-Newton\n","$$m_{n+1} = m_n - [J_n^T J_n + H_n^T \\Delta d]^{-1} J_n^T \\Delta d$$\n","3.   Metode Gradien\n","$$m_{n+1} = m_n - 2k \\bigg( J_n^T \\Delta d \\bigg)$$\n","4.   Metode Levenberg-Marquardt\n","$$m_{n+1} = m_n + [J_n^T J_n + \\varepsilon^2 I]^{-1} J_n^T \\Delta d$$\n","5.   Metode Singular Value Decomposition\n","\n","Note:\n","\\begin{align}\n","\\Delta d &= d^{cal} - d^{obs} \\\\\n","         &= g(m_n) - d^{obs}\n","\\end{align}\n","\n","turunan parsial Jacobian dan Hessian\n","\n","\\begin{align}\n","J = \\frac{\\delta g}{\\delta m}\n","\\end{align}\n","\n","\\begin{align}\n","H = \\frac{\\delta^2 g}{\\delta m^2}\n","\\end{align}\n","\n","**Pendekatan Global** \\\n","nah ini nanti akan dibagi menjadi algoritma stokastik dan detrministik\n","1.   Metode Algoritma Genetika (GA)\n","2.   Metode Simulated Annealing (SA)\n","3.   Metode Very Fast Simulated Annealing (VFSA)\n","4.   Metode Partical Swarm Optimization (PSO)\n","5.   Metode Flower Pollination Algorithm (FPA)\n","6.   Metode Fireflly Algorithm (FFA)\n","7.   Metode The Whale Optimization Algorithm $(WOA)^{23}$\n","8.   Metode Monte Carlo\n","9.   Metode Invers Random Search"],"metadata":{"id":"NXXILUe68xDs"}},{"cell_type":"code","source":["def yi(a, b, xi):\n","  \"\"\"\n","  a = parameter model [float]\n","  b = parameter model [float]\n","  xi = variabel bebas [array]\n","\n","  return data kalkulasi [array]\n","  \"\"\"\n","  return a + b * xi\n","\n","def misfit(y_cal, y_obs):\n","  \"\"\"\n","  y_cal = data kalkulasi [array]\n","  y_obs = data observasi [array]\n","\n","  return nilai misfit [float]\n","  \"\"\"\n","  N = len(y_cal)\n","  return np.sqrt(np.sum((y_cal - y_obs)**2) / N)\n","\n","def model_param(x, y):\n","  \"\"\"\n","  x = variabel bebas [array]\n","  y = data kalkulasi [array]\n","\n","  return parameter model [array]\n","  \"\"\"\n","  N = len(x)\n","  G = np.concatenate((np.ones((N, 1)), x.reshape(N, 1)), axis=1)\n","  d = y.reshape(N, 1)\n","\n","  return np.linalg.inv(G.T @ G) @ G.T @ d"],"metadata":{"id":"e4spRXxqDKgW","executionInfo":{"status":"ok","timestamp":1722684082846,"user_tz":-420,"elapsed":20,"user":{"displayName":"Yusuf Umar Al Hakim","userId":"06665558864843015377"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["x = np.array([1,2,3,4,5,6,7,8,9,10])\n","y_obs = np.array([ 10.1,  20.1,  30.1,  40.1,  50.1,  60.1,  70.1,  80.1,  90.1, 100.1])\n","\n","m = model_param(x, y_obs)\n","a, b = m.flatten()\n","\n","y_cal = yi(a, b, x)\n","\n","E = misfit(y_cal, y_obs)\n","\n","\n","print(f\"a = {a}\")\n","print(f\"b = {b}\")\n","print(f\"RMSE = {E}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"Hf4uUfhBMA5j","executionInfo":{"status":"ok","timestamp":1722684082847,"user_tz":-420,"elapsed":19,"user":{"displayName":"Yusuf Umar Al Hakim","userId":"06665558864843015377"}},"outputId":"853d5ff8-f204-49b0-8f59-797a496a6e8b"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["a = 0.10000000000001563\n","b = 10.0\n","RMSE = 2.120496913404914e-14\n"]}]},{"cell_type":"markdown","source":["Matriks Jacobian\n","\n","$$J_{ij} = \\frac{\\delta g_i}{\\delta m_j}$$\n","\n","$$\n","J\n","=\n","\\frac{dg}{d m}\n","=\n","\\left[ \\frac{\\delta g}{\\delta m_1}\n","\\cdots \\frac{\\delta g}{\\delta m_j}\\right]\n","=\n","\\begin{bmatrix}\n","\\frac{\\delta g_1}{\\delta m_1} & \\cdots &\n","\\frac{\\delta g_1}{\\delta m_j} \\\\\n","\\vdots & \\ddots & \\vdots \\\\\n","\\frac{\\delta g_i}{\\delta m_1} & \\cdots &\n","\\frac{\\delta g_i}{\\delta m_j}\n","\\end{bmatrix}\n","$$"],"metadata":{"id":"YVqkdu7tBxFM"}},{"cell_type":"code","source":["# tentukan baris dan kolom matriks jacobian\n","# hitung f dari parameter tebakan\n","# hitung turunan parsial\n","def f(x, y, z=1):\n","  return (x + y) / z\n","\n","data_observasi = [1,3,5,7]\n","x_tebakan = [1,2,3,4]\n","x_tebakan = np.array(x_tebakan, dtype=float)\n","y_tebakan = [1,2,3,4]\n","y_tebakan = np.array(y_tebakan, dtype=float)\n","z_tebakan = [1,2,3,4]\n","z_tebakan = np.array(z_tebakan, dtype=float)\n","\n","tebakan = [x_tebakan, y_tebakan, z_tebakan]\n","\n","jumlah_parameter = len(tebakan)\n","jumlah_data = len(data_observasi)\n","\n","# inisialisasi matriks jacobian\n","jacobian = np.zeros((jumlah_data, jumlah_parameter))\n","\n","data_kalkulasi = f(x_tebakan, y_tebakan, z_tebakan)\n","\n","delta_x = 0.1\n","delta_y = 0.2\n","delta_z = 0.4\n","\n","delta_m = [delta_x, delta_y, delta_z]\n","\n","# persiapan forward finite different\n","\n","baru = np.array([np.array(tebakan[i]) + delta_m[i] for i in range(jumlah_parameter)])\n","\n","test = np.array([[tebakan[i] for i in range(jumlah_parameter)] for j in range(jumlah_parameter)])\n","\n","for i in range(len(baru)):\n","  test[i, i] = baru[i]\n","\n","# forward finite different\n","data_kalkulasi_2 = [f(*param) for param in test]\n","\n","for kolom in range(jumlah_parameter):\n","  jacobian[:, kolom] = (data_kalkulasi_2[kolom] - data_kalkulasi) / delta_m[kolom]\n","\n","print(jacobian)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_Y5Mjxu1LcpL","executionInfo":{"status":"ok","timestamp":1722684082847,"user_tz":-420,"elapsed":15,"user":{"displayName":"Yusuf Umar Al Hakim","userId":"06665558864843015377"}},"outputId":"c60fc38d-8f6f-4963-efa0-d0183f2e835f"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 1.          1.         -1.42857143]\n"," [ 0.5         0.5        -0.83333333]\n"," [ 0.33333333  0.33333333 -0.58823529]\n"," [ 0.25        0.25       -0.45454545]]\n"]}]},{"cell_type":"code","source":["import numpy as np\n","from copy import deepcopy as dc\n","\n","def forward_difference(func1, arrays, h_list, y_initial, J):\n","  \"\"\"\n","  Menghitung beda hingga maju untuk fungsi dengan parameter dinamis.\n","  \"\"\"\n","  # Implementasi forward difference\n","  # ...\n","  for i in range(len(arrays)):\n","    # Forward modification\n","    modified_arrays_forward = [arr.copy() for arr in arrays]\n","    modified_arrays_forward[i] += h_list[i]\n","    y_forward = np.array([func1(*params) for params in zip(*modified_arrays_forward)])\n","\n","    # Forward difference\n","    J[:, i] = (y_forward - y_initial) /  h_list[i]\n","\n","  return J\n","\n","def backward_difference(func1, arrays, h_list, y_initial, J):\n","  \"\"\"\n","  Menghitung beda hingga mundur untuk fungsi dengan parameter dinamis.\n","  \"\"\"\n","  # Implementasi backward difference\n","  # ...\n","  for i in range(len(arrays)):\n","    # Backward modification\n","    modified_arrays_backward = [arr.copy() for arr in arrays]\n","    modified_arrays_backward[i] -= h_list[i]\n","    y_backward = np.array([func1(*params) for params in zip(*modified_arrays_backward)])\n","\n","    # Backward difference\n","    J[:, i] = (y_initial - y_backward) / h_list[i]\n","\n","  return J\n","\n","def central_difference(func1, arrays, h_list, y_initial, J):\n","  \"\"\"\n","  Menghitung beda hingga tengah untuk fungsi dengan parameter dinamis.\n","  \"\"\"\n","  # Implementasi central difference\n","  # ...\n","  for i in range(len(arrays)):\n","    # Forward modification\n","    modified_arrays_forward = [arr.copy() for arr in arrays]\n","    modified_arrays_forward[i] += h_list[i]\n","    y_forward = np.array([func1(*params) for params in zip(*modified_arrays_forward)])\n","\n","    # Backward modification\n","    modified_arrays_backward = [arr.copy() for arr in arrays]\n","    modified_arrays_backward[i] -= h_list[i]\n","    y_backward = np.array([func1(*params) for params in zip(*modified_arrays_backward)])\n","\n","    # Central difference\n","    J[:, i] = (y_forward - y_backward) / (2 * h_list[i])\n","  return J\n","\n","def jacobian(func1, *args, h_list, method=\"central\"):\n","  \"\"\"\n","  Menghitung matriks Jacobian dengan memilih metode perhitungan.\n","  Args:\n","  func1: Fungsi yang akan dihitung beda hingganya.\n","  *args: Daftar nilai untuk setiap parameter.\n","  h_list: Daftar langkah kecil (step sizes) untuk setiap parameter.\n","  method: Metode perhitungan (\"forward\", \"backward\", atau \"central\").\n","\n","  Returns:\n","  tuple of numpy arrays: Hasil perhitungan beda hingga untuk fungsi pada daftar nilai parameter.\n","  \"\"\"\n","  num_params = len(args)\n","  if num_params != len(h_list):\n","    raise ValueError(\"Jumlah parameter input dan langkah kecil harus sama.\")\n","\n","  # Mengonversi setiap daftar nilai menjadi numpy array\n","  arrays = [np.array(param) for param in args]\n","\n","  # Mengecek panjang setiap array\n","  array_lengths = [len(arr) for arr in arrays]\n","  if not all(length == array_lengths[0] for length in array_lengths):\n","    raise ValueError(\"Semua parameter input harus memiliki panjang yang sama.\")\n","\n","  # Menghitung fungsi pada titik-titik awal\n","  y_initial = np.array([func1(*params) for params in zip(*arrays)])\n","\n","  # Inisialisasi matriks Jacobian\n","  J = np.zeros((len(y_initial), num_params))\n","\n","  if method == \"forward\":\n","    J = forward_difference(func1, arrays, h_list, y_initial, J)\n","  elif method == \"backward\":\n","    J = backward_difference(func1, arrays, h_list, y_initial, J)\n","  elif method == \"central\":\n","    J = central_difference(func1, arrays, h_list, y_initial, J)\n","  else:\n","    raise ValueError(\"Metode perhitungan tidak valid. Gunakan 'forward', 'backward', atau 'central'.\")\n","\n","  return J\n","\n","# forward modeling a.k.a g(m)\n","def f(x, y, z=2):\n","  return (x + y) / z\n","\n","x_tebakan = np.array([1, 2, 3, 4], dtype=float)\n","y_tebakan = np.array([1, 2, 3, 4], dtype=float)\n","z_tebakan = np.array([1, 2, 3, 4], dtype=float)\n","\n","x_values = x_tebakan\n","y_values = y_tebakan\n","z_values = z_tebakan\n","\n","# params = [x_values, y_values]\n","params = [x_values, y_values, z_values]\n","\n","# Langkah kecil untuk setiap parameter\n","delta = [0.1, 0.2, 0.4]\n","# delta = [0.1, 0.2]\n","\n","# Hitung matriks jacobian\n","jacobain_matriks = jacobian(f, *params, h_list=delta, method=\"backward\")\n","print(jacobain_matriks)\n","\n","# Cetak hasilnya\n","for i, diff in enumerate(jacobain_matriks.T, start=1):\n","  print(f\"Hasil beda hingga maju untuk parameter {i}:\")\n","  print(diff)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"B26oyrhS0Jnd","executionInfo":{"status":"ok","timestamp":1722684225757,"user_tz":-420,"elapsed":538,"user":{"displayName":"Yusuf Umar Al Hakim","userId":"06665558864843015377"}},"outputId":"f576987b-c783-41a6-ad23-a0cc9cf3b407"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 1.          1.         -3.33333333]\n"," [ 0.5         0.5        -1.25      ]\n"," [ 0.33333333  0.33333333 -0.76923077]\n"," [ 0.25        0.25       -0.55555556]]\n","Hasil beda hingga maju untuk parameter 1:\n","[1.         0.5        0.33333333 0.25      ]\n","Hasil beda hingga maju untuk parameter 2:\n","[1.         0.5        0.33333333 0.25      ]\n","Hasil beda hingga maju untuk parameter 3:\n","[-3.33333333 -1.25       -0.76923077 -0.55555556]\n"]}]}]}