{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNfOS3ZNHCvZyhmvJT0XkGL"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"V90NhD9KG9u8"},"outputs":[],"source":["import numpy as np"]},{"cell_type":"markdown","source":["Forward modelling by Ekinci at.al"],"metadata":{"id":"m2DIRMVVHHB7"}},{"cell_type":"code","source":["# Ekinci Y L and Demirci A, 2008 A Damped Least-Squares Inversion Program for the Interpretation of Schlumberger Sounding Curves J. Appl. Sci. 8, 22 p. 4070â€“4078\n","def VES1dmod(r, t, s):\n","  q = 13\n","  f = 10\n","  m = 4.438\n","  x = 0\n","  e = np.exp(0.5 * np.log(10) / m)\n","  h = 2*q - 2\n","  u = s * np.exp(-f * np.log(10) / m - x)\n","  l = len(r)\n","  n = l\n","  a = np.zeros(n + h)\n","\n","  for i in range(n + h):\n","    w = 1\n","    v = r[0]\n","    while w > 1:\n","      w -= 1\n","      aa = np.tanh(t[w] / u)\n","      v = (v + r[w] * aa) / (1 + v * aa / r[w])\n","    a[i] = v\n","    u *= e\n","  i = 0\n","  g = 105*a[i] - 262*a[i+2] + 416*a[i+4] - 746*a[i+6] + 1605*a[i+8]\n","  g -= 4390*a[i+10] + 13396*a[i+12] - 27841*a[i+14]\n","  g += 16448*a[i+16] + 8183*a[i+18] + 2525*a[i+20]\n","  g = (g + 336*a[i+22] + 225*a[i+24]) / 10000\n","  return g"],"metadata":{"id":"BT-ZsMFSHGHG"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["<!-- \\documentclass{article}\n","\\usepackage{amsmath}\n","\n","\\begin{document}\n","\n","\\section*{Persamaan Matematis}\n","\n","\\textbf{Inisialisasi:} -->\n","\\begin{equation}\n","T = \\text{self.__rhotr}[n]\n","\\end{equation}\n","\\begin{equation}\n","\\lambda_r = 10^{(a_r[i] - \\log_{10}(L))}\n","\\end{equation}\n","\n","\\textbf{Iterasi untuk Setiap Lapisan:}\n","\\begin{equation}\n","\\text{tanh}_k = \\tanh(\\lambda_r \\cdot \\text{self.__thick}[k])\n","\\end{equation}\n","\\begin{equation}\n","T = \\frac{T + \\text{self.__rhotr}[k] \\cdot \\text{tanh}_k}{1 + \\frac{T \\cdot \\text{tanh}_k}{\\text{self.__rhotr}[k]}}\n","\\end{equation}\n","\n","\\textbf{Hasil Akhir untuk Setiap } i:\n","\\begin{equation}\n","T_{\\phi_i} = T \\cdot \\text{self.__phi_r}[i]\n","\\end{equation}\n","\\begin{equation}\n","\\rho_{\\text{app}} = \\sum_{i} T_{\\phi_i}\n","\\end{equation}\n","\n","<!-- \\end{document} -->\n"],"metadata":{"id":"nrq2VRW7PmYu"}},{"cell_type":"markdown","source":["<!-- \\documentclass{article}\n","\\usepackage{amsmath}\n","\n","\\begin{document} -->\n","\n","<!-- \\section*{Persamaan Matematis untuk Matriks Jacobian} -->\n","\n","\\textbf{Perturbasi Model:}\n","\\begin{equation}\n","\\Delta m = \\epsilon \\cdot \\text{self.__mod.flatten()}\n","\\end{equation}\n","\n","\\textbf{Inisialisasi Matriks Jacobian:}\n","\\begin{equation}\n","J \\in \\mathbb{R}^{M \\times N}\n","\\end{equation}\n","\n","\\textbf{Perhitungan Beda Hingga:}\n","Untuk setiap parameter \\( j \\) dari 0 hingga \\( N-1 \\):\n","\\begin{equation}\n","dm = \\text{dc}(\\text{self.__mod.flatten()})\n","\\end{equation}\n","\\begin{equation}\n","dm[j] = dm[j] + \\Delta m[j]\n","\\end{equation}\n","\\begin{equation}\n","drho = dm[:n]\n","\\end{equation}\n","\\begin{equation}\n","dh = dm[n:]\n","\\end{equation}\n","\\begin{equation}\n","f_{mdm} = \\text{self.__slb.run}(\\text{self.__ab2}, \\text{self.__rhoap_obs}, drho, dh, \\text{self.__filter_coeff})\n","\\end{equation}\n","\\begin{equation}\n","f_m = \\text{self.__slb.run}(\\text{self.__ab2}, \\text{self.__rhoap_obs}, \\text{self.__rhotr_init}, \\text{self.__thick_init}, \\text{self.__filter_coeff})\n","\\end{equation}\n","\\begin{equation}\n","J[:, j] = \\frac{f_{mdm} - f_m}{\\Delta m[j]}\n","\\end{equation}\n","\n","<!-- \\end{document} -->\n"],"metadata":{"id":"kkKtbWu7k7fY"}}]}